// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.3
// source: language.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LanguageClient is the client API for Language service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LanguageClient interface {
	Register(ctx context.Context, opts ...grpc.CallOption) (Language_RegisterClient, error)
}

type languageClient struct {
	cc grpc.ClientConnInterface
}

func NewLanguageClient(cc grpc.ClientConnInterface) LanguageClient {
	return &languageClient{cc}
}

func (c *languageClient) Register(ctx context.Context, opts ...grpc.CallOption) (Language_RegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &Language_ServiceDesc.Streams[0], "/Language/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &languageRegisterClient{stream}
	return x, nil
}

type Language_RegisterClient interface {
	Send(*PluginMessage) error
	Recv() (*ServerMessage, error)
	grpc.ClientStream
}

type languageRegisterClient struct {
	grpc.ClientStream
}

func (x *languageRegisterClient) Send(m *PluginMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *languageRegisterClient) Recv() (*ServerMessage, error) {
	m := new(ServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LanguageServer is the server API for Language service.
// All implementations should embed UnimplementedLanguageServer
// for forward compatibility
type LanguageServer interface {
	Register(Language_RegisterServer) error
}

// UnimplementedLanguageServer should be embedded to have forward compatible implementations.
type UnimplementedLanguageServer struct {
}

func (UnimplementedLanguageServer) Register(Language_RegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method Register not implemented")
}

// UnsafeLanguageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LanguageServer will
// result in compilation errors.
type UnsafeLanguageServer interface {
	mustEmbedUnimplementedLanguageServer()
}

func RegisterLanguageServer(s grpc.ServiceRegistrar, srv LanguageServer) {
	s.RegisterService(&Language_ServiceDesc, srv)
}

func _Language_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LanguageServer).Register(&languageRegisterServer{stream})
}

type Language_RegisterServer interface {
	Send(*ServerMessage) error
	Recv() (*PluginMessage, error)
	grpc.ServerStream
}

type languageRegisterServer struct {
	grpc.ServerStream
}

func (x *languageRegisterServer) Send(m *ServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *languageRegisterServer) Recv() (*PluginMessage, error) {
	m := new(PluginMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Language_ServiceDesc is the grpc.ServiceDesc for Language service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Language_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Language",
	HandlerType: (*LanguageServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _Language_Register_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "language.proto",
}
